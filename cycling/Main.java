package cycling;import java.io.IOException;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.LocalTime;import java.time.temporal.ChronoUnit;public class Main {    public static void main(String[] args) throws InvalidNameException, IllegalNameException, IDNotRecognisedException, InvalidLengthException, InvalidStageStateException, InvalidLocationException, InvalidStageTypeException, DuplicatedResultException, InvalidCheckpointsException, IOException, ClassNotFoundException {        CyclingPortal g = new CyclingPortal();        System.out.println( g.createRace("penis", "hard"));        LocalDateTime f = LocalDateTime.of(LocalDate.now(), LocalTime.of(10, 0, 0));        LocalTime t = LocalTime.of(10, 10, 0);        LocalTime t2 = LocalTime.of(10, 20, 0);        LocalTime t3 = LocalTime.of(10, 30, 0);        LocalTime t4 = LocalTime.of(10, 40, 0);        LocalTime t5 = LocalTime.of(10, 50, 0);        LocalTime t6 = LocalTime.of(11, 0, 0);        LocalTime t7 = LocalTime.of(11, 10, 0);        LocalTime t8 = LocalTime.of(11, 20, 0);        System.out.println( g.addStageToRace(100, "idk", "good morning", 9.7, f, StageType.FLAT));        g.createTeam("teamname", "mashallah");        System.out.println( g.createRider(100, "omar", 1997));        System.out.println( g.createRider(100, "misha", 1998));        System.out.println( g.createRider(100, "omar", 1999));        System.out.println( g.createRider(100, "hussein", 2000));        g.addCategorizedClimbToStage(100, 5.1, SegmentType.C1, 22.1, 5.0);        g.addCategorizedClimbToStage(100, 5.5, SegmentType.C2, 22.5, 6.0);//        g.addIntermediateSprintToStage(100, 90);        g.registerRiderResultsInStage(100, 100, t, t6);        g.registerRiderResultsInStage(100, 101, t2, t3);        g.registerRiderResultsInStage(100, 102, t, t4);        g.registerRiderResultsInStage(100, 103, t3, t6);//        g.registerRiderResultsInStage(100, 100, t);//        g.registerRiderResultsInStage(100, 101, t);//        g.registerRiderResultsInStage(100, 102, t);//        g.registerRiderResultsInStage(100, 103, t);//        for (LocalTime time : g.getRiderResultsInStage(100, 100)) {//            System.out.println(time);//        }//        for (LocalTime time : g.getRiderResultsInStage(100, 101)) {//            System.out.println(time);//        }//        for (LocalTime time : g.getRiderResultsInStage(100, 102)) {//            System.out.println(time);//        }//        for (LocalTime time : g.getRiderResultsInStage(100, 103)) {//            System.out.println(time);//        }//        for (int i : g.getRidersPointsInStage(100)) {//            System.out.println(i);//        }//        g.test(100);//        System.out.println(g.getMountainPoints(100, 102));        ;        int[] points = g.getRidersMountainPointsInStage(100);        for (int i=0; i<points.length; i++) {            System.out.println(points[i]);        }        g.saveCyclingPortal("/Users/misascherbakov/Desktop/ecm1410_coursework/src/cycling/test.ser");        g.loadCyclingPortal("/Users/misascherbakov/Desktop/ecm1410_coursework/src/cycling/test.ser");    }}//        LocalTime first = LocalTime.of(10, 11, 10);//        LocalTime last = LocalTime.of(10, 20, 10);////        int milliseconds = (int)  first.until(last, ChronoUnit.MILLIS);//        int hours = milliseconds / (60*60*1000);//        milliseconds = milliseconds - hours*(60*60*1000);//        int minutes = milliseconds / (60*1000);//        milliseconds = milliseconds - minutes*(60*1000);//        int seconds = milliseconds / 1000;//        milliseconds = milliseconds - seconds*1000;////        LocalTime elapsedTime = LocalTime.of(hours, minutes, seconds, milliseconds);//////        System.out.println(elapsedTime);